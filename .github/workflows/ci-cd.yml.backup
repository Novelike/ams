name: AMS Backend CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'ams-back/**'
      - 'deployment/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'ams-back/**'
      - 'deployment/**'

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'

jobs:
  # 코드 품질 검사
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('ams-back/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        cd ams-back
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort mypy pytest-cov

    - name: Code formatting check (Black)
      run: |
        cd ams-back
        black --diff .

    - name: Import sorting check (isort)
      run: |
        cd ams-back
        isort --diff .

    - name: Linting (flake8)
      run: |
        cd ams-back
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Type checking (mypy)
      run: |
        cd ams-back
        mypy app/ --ignore-missing-imports || true

  # 단위 테스트
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality

    strategy:
      matrix:
        python-version: ['3.10']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('ams-back/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        cd ams-back
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio

    - name: Run unit tests
      run: |
        cd ams-back
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.9'
      uses: codecov/codecov-action@v3
      with:
        file: ./ams-back/coverage.xml
        flags: unittests
        name: codecov-umbrella

  # 통합 테스트
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ams_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        cd ams-back
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio

    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ams_test
      run: |
        cd ams-back
        pytest tests/integration/ -v

    - name: Run Phase 3 GPU tests
      run: |
        cd ams-back
        python -m pip install --upgrade pip
        pip install aiohttp
        python scripts/test_phase3_gpu.py || true

  # 보안 스캔
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: code-quality

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit

    - name: Run bandit security linter
      run: |
        cd ams-back
        bandit -r app/ -f json -o bandit-report.json || true

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results
        path: ams-back/bandit-report.json

  # Docker 이미지 빌드
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ams-backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./ams-back
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/ams-backend:latest
          ${{ secrets.DOCKER_USERNAME }}/ams-backend:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 개발 환경 배포
  deploy-dev:
    name: Deploy to Development
    runs-on: [self-hosted, windows, deployment]
    needs: [build-docker, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: development

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install deployment dependencies
      run: |
        python -m pip install --upgrade pip
        pip install paramiko scp

    - name: Configure SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.BASTION_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to development server
      env:
        BASTION_HOST: ${{ secrets.BASTION_HOST }}
        BACKEND_HOST: ${{ secrets.BACKEND_HOST }}
        SSH_USER: ${{ secrets.SSH_USER }}
      run: |
        python deployment/deploy_dev.py --branch=develop

    - name: Run post-deployment tests
      run: |
        python deployment/test_deployment.py --environment=development

    - name: Notify deployment status
      if: always() && env.SLACK_WEBHOOK_URL != ''
      uses: 8398a7/action-slack@v3
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      with:
        status: ${{ job.status }}
        channel: '#deployments'

  # 프로덕션 배포 (Blue-Green)
  deploy-prod:
    name: Deploy to Production (Blue-Green)
    runs-on: [self-hosted, windows, deployment]
    needs: [build-docker, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install deployment dependencies
      run: |
        python -m pip install --upgrade pip
        pip install paramiko scp requests

    - name: Configure SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.BASTION_HOST }} >> ~/.ssh/known_hosts

    - name: Pre-deployment health check
      env:
        SKIP_HTTP_CHECKS: "true"
        SKIP_DB_CHECKS: "true"
      run: |
        python deployment/health_check_prod.py

    - name: Blue-Green deployment
      env:
        DEPLOYMENT_MODE: production  # 실제 배포 모드
        BASTION_HOST: ${{ secrets.BASTION_HOST }}
        BACKEND_HOST: ${{ secrets.BACKEND_HOST }}
        SSH_USER: ${{ secrets.SSH_USER }}
      run: |
        python deployment/blue_green_deploy.py --branch=main

    - name: Post-deployment verification
      run: |
        python deployment/verify_deployment.py --environment=production

    - name: Update deployment status
      if: success()
      run: |
        echo "Deployment successful at $(Get-Date)" >> deployment/deployment_history.log
      shell: pwsh

    - name: Rollback on failure
      if: failure()
      run: |
        python deployment/emergency_rollback.py

    - name: Notify deployment status
      if: always() && env.SLACK_WEBHOOK_URL != ''
      uses: 8398a7/action-slack@v3
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        fields: repo,message,commit,author,action,eventName,ref,workflow

  # 성능 테스트
  performance-test:
    name: Performance Test
    runs-on: [self-hosted, windows, deployment]
    needs: deploy-prod
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install k6
      run: |
        # Install k6 for Windows
        if (!(Get-Command k6 -ErrorAction SilentlyContinue)) {
          Invoke-WebRequest -Uri "https://github.com/grafana/k6/releases/latest/download/k6-v0.47.0-windows-amd64.zip" -OutFile "k6.zip"
          Expand-Archive -Path "k6.zip" -DestinationPath "."
          Move-Item "k6-*\k6.exe" "k6.exe"
          $env:PATH += ";$(Get-Location)"
        }
      shell: pwsh

    - name: Run performance tests
      run: |
        k6 run deployment/performance/load_test.js

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-test-results
        path: performance-results.json

  # 모니터링 설정
  setup-monitoring:
    name: Setup Monitoring
    runs-on: [self-hosted, windows, deployment]
    needs: deploy-prod
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    env:
      GRAFANA_API_KEY: ${{ secrets.GRAFANA_API_KEY }}
      PROMETHEUS_URL: ${{ secrets.PROMETHEUS_URL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure monitoring alerts
        if: env.GRAFANA_API_KEY != '' && env.PROMETHEUS_URL != ''
        env:
          GRAFANA_API_KEY: ${{ secrets.GRAFANA_API_KEY }}
          PROMETHEUS_URL: ${{ secrets.PROMETHEUS_URL }}
        run: |
          python deployment/setup_monitoring.py

      - name: Test monitoring endpoints
        if: env.GRAFANA_API_KEY != '' && env.PROMETHEUS_URL != ''
        run: |
          python deployment/test_monitoring.py

  # 정리 작업
  cleanup:
    name: Cleanup
    runs-on: [self-hosted, windows, deployment]
    needs: [deploy-prod, performance-test]
    if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install cleanup dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests

    - name: Clean up old Docker images
      run: |
        python deployment/cleanup_docker.py

    - name: Archive deployment logs
      run: |
        python deployment/archive_logs.py

    - name: Generate deployment report
      run: |
        python deployment/generate_report.py --format=html --output=deployment-report.html

    - name: Upload deployment report
      uses: actions/upload-artifact@v4
      with:
        name: deployment-report
        path: deployment-report.html
